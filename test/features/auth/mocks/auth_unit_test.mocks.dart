// Mocks generated by Mockito 5.4.5 from annotations
// in tourist_guide/test/auth_bloc_unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tourist_guide/core/utils/result.dart' as _i2;
import 'package:tourist_guide/domain/auth/entities/user_entity.dart' as _i5;
import 'package:tourist_guide/domain/auth/interfaces/auth_service.dart' as _i3;
import 'package:tourist_guide/domain/auth/interfaces/biometric_service.dart'
    as _i8;
import 'package:tourist_guide/domain/auth/models/auth_credentials.dart' as _i6;
import 'package:tourist_guide/domain/auth/models/sign_up_data.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
//
class _FakeResult_0<T> extends _i1.SmartFake implements _i2.Result<T> {
  _FakeResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IAuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIAuthService extends _i1.Mock implements _i3.IAuthService {
  MockIAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<bool> get authStateChanges => (super.noSuchMethod(
        Invocation.getter(#authStateChanges),
        returnValue: _i4.Stream<bool>.empty(),
      ) as _i4.Stream<bool>);

  @override
  _i4.Future<_i2.Result<_i5.UserEntity>> signIn(
          _i6.AuthCredentials? credentials) =>
      (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [credentials],
        ),
        returnValue: _i4.Future<_i2.Result<_i5.UserEntity>>.value(
            _FakeResult_0<_i5.UserEntity>(
          this,
          Invocation.method(
            #signIn,
            [credentials],
          ),
        )),
      ) as _i4.Future<_i2.Result<_i5.UserEntity>>);

  @override
  _i4.Future<_i2.Result<_i5.UserEntity>> signUp(_i7.SignUpData? signUpData) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [signUpData],
        ),
        returnValue: _i4.Future<_i2.Result<_i5.UserEntity>>.value(
            _FakeResult_0<_i5.UserEntity>(
          this,
          Invocation.method(
            #signUp,
            [signUpData],
          ),
        )),
      ) as _i4.Future<_i2.Result<_i5.UserEntity>>);

  @override
  _i4.Future<_i2.Result<void>> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i4.Future<_i2.Result<void>>.value(_FakeResult_0<void>(
          this,
          Invocation.method(
            #signOut,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Result<void>>);
}

/// A class which mocks [IBiometricService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIBiometricService extends _i1.Mock implements _i8.IBiometricService {
  MockIBiometricService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> isAvailable() => (super.noSuchMethod(
        Invocation.method(
          #isAvailable,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> authenticate() => (super.noSuchMethod(
        Invocation.method(
          #authenticate,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
